{"version":3,"sources":["Components/Controller/Bulk-controller.jsx","Components/Controller/Filter-controller.jsx","Components/Controller/SearchPanel.jsx","Components/Controller/View-controller.jsx","Components/Controller/Index.jsx","Components/create-todo-form/index.jsx","Components/Listview/Index.jsx","Components/Tableview/index.jsx","Components/todos/Index.jsx","App.js","index.js"],"names":["BulkController","clearSelected","clearCompleted","reset","color","onClick","FilterController","handleFilter","SerachPanel","term","handleSearch","toggleForm","className","placeholder","value","onChange","event","target","protoTypes","propTypes","string","isRequired","func","ViewController","view","changeView","type","name","id","checked","Controller","md","size","CreateTodoForm","state","text","description","handleChange","setState","handleSubmit","preventDefault","createTodo","props","this","onSubmit","for","React","Component","ListItem","todo","toggleSelect","toggleCompleted","time","isSelect","isComplete","toDateString","ListView","todos","map","RowItem","scope","TableView","Todos","Date","isOpenTodoForm","searchTerm","filter","shortid","generate","performSearch","toLowerCase","includes","performFilter","getView","todoId","find","todoid","console","log","isOpen","toggle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.585b238b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\n\r\nconst BulkController = ({ clearSelected, clearCompleted, reset }) => (\r\n    <ButtonGroup>\r\n        <Button color=\"warning\" onClick={clearSelected}>\r\n            Clear Selected\r\n        </Button>\r\n        <Button color=\"warning\" onClick={clearCompleted}>\r\n            Clear Completed\r\n        </Button>\r\n        <Button color=\"danger\" onClick={reset}>\r\n            Reset\r\n        </Button>\r\n    </ButtonGroup>\r\n);\r\n\r\nBulkController.propTypes = {\r\n    clearSelected: PropTypes.func.isRequired,\r\n    clearCompleted: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default BulkController;\r\n","import propTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\n\r\nconst FilterController = ({ handleFilter }) => (\r\n    <ButtonGroup>\r\n        <Button onClick={() => handleFilter('all')}>All</Button>\r\n        <Button onClick={() => handleFilter('running')}>Running</Button>\r\n        <Button onClick={() => handleFilter('completed')}>Completed</Button>\r\n    </ButtonGroup>\r\n);\r\nFilterController.propTypes = {\r\n    handleFilter: propTypes.func.isRequired,\r\n};\r\nexport default FilterController;\r\n","import propTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Button, Input } from 'reactstrap';\r\n\r\nconst SerachPanel = ({ term, handleSearch, toggleForm }) => (\r\n    <div className=\"d-flex align-items-center mb-4\">\r\n        <Input\r\n            placeholder=\"Enter Search Term\"\r\n            className=\"me-4\"\r\n            value={term}\r\n            onChange={(event) => handleSearch(event.target.value)}\r\n        />\r\n        <Button color=\"success\" className=\"ml-auto btn btn-sm\" onClick={toggleForm}>\r\n            New\r\n        </Button>\r\n    </div>\r\n);\r\n\r\nSerachPanel.protoTypes = {\r\n    term: propTypes.string.isRequired,\r\n    handleSearch: propTypes.func.isRequired,\r\n    toggleForm: propTypes.func.isRequired,\r\n};\r\nexport default SerachPanel;\r\n","import propTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Input, Label } from 'reactstrap';\r\n\r\nconst ViewController = ({ view, changeView }) => (\r\n    <div className=\"d-flex justify-content-around\">\r\n        <Input\r\n            type=\"radio\"\r\n            name=\"view\"\r\n            value=\"list\"\r\n            id=\"list-view\"\r\n            onChange={changeView}\r\n            className=\"d-inline-block\"\r\n            checked={view === 'list'}\r\n        />\r\n        <Label className=\"ms-2\" id=\"list-view\">\r\n            List\r\n        </Label>\r\n\r\n        <Input\r\n            type=\"radio\"\r\n            name=\"view\"\r\n            value=\"table\"\r\n            id=\"table-view\"\r\n            onChange={changeView}\r\n            className=\"d-inline-block\"\r\n            checked={view === 'table'}\r\n        />\r\n        <Label className=\"ms-2\" id=\"table-view\">\r\n            Table View\r\n        </Label>\r\n    </div>\r\n);\r\n\r\nViewController.propTypes = {\r\n    view: propTypes.string.isRequired,\r\n    changeView: propTypes.func.isRequired,\r\n};\r\nexport default ViewController;\r\n","import propTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport BulkController from './Bulk-controller';\r\nimport FilterController from './Filter-controller';\r\nimport SerachPanel from './SearchPanel';\r\nimport ViewController from './View-controller';\r\n\r\nconst Controller = ({\r\n    view,\r\n    term,\r\n    handleSearch,\r\n    toggleForm,\r\n    handleFilter,\r\n    changeView,\r\n    clearSelected,\r\n    clearCompleted,\r\n    reset,\r\n}) => (\r\n    <div>\r\n        <SerachPanel term={term} handleSearch={handleSearch} toggleForm={toggleForm} />\r\n        <Row className=\"my-4\">\r\n            <Col md={{ size: 4 }}>\r\n                <FilterController handleFilter={handleFilter} />\r\n            </Col>\r\n            <Col md={{ size: 4 }}>\r\n                <ViewController view={view} changeView={changeView} />\r\n            </Col>\r\n            <Col md={{ size: 4 }} className=\"d-flex\">\r\n                <div className=\"ml-auto\">\r\n                    <BulkController\r\n                        clearSelected={clearSelected}\r\n                        clearCompleted={clearCompleted}\r\n                        reset={reset}\r\n                    />\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n);\r\nController.protoTypes = {\r\n    term: propTypes.string.isRequired,\r\n    handleSearch: propTypes.func.isRequired,\r\n    toggleForm: propTypes.func.isRequired,\r\n    handleFilter: propTypes.func.isRequired,\r\n    view: propTypes.string.isRequired,\r\n    changeView: propTypes.func.isRequired,\r\n    clearSelected: propTypes.func.isRequired,\r\n    clearCompleted: propTypes.func.isRequired,\r\n    reset: propTypes.func.isRequired,\r\n};\r\nexport default Controller;\r\n","import propTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\r\n\r\nclass CreateTodoForm extends React.Component {\r\n    state = {\r\n        text: '',\r\n        description: '',\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { createTodo } = this.props;\r\n        createTodo(this.state);\r\n        event.target.reset();\r\n        this.setState({\r\n            text: '',\r\n            description: '',\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { text, description } = this.state;\r\n        return (\r\n            <div>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"input\"> Enter Task</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"text\"\r\n                            id=\"input\"\r\n                            placeholder=\"Do some code\"\r\n                            value={text}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"description\">Describe Task</Label>\r\n                        <Input\r\n                            type=\"textarea\"\r\n                            name=\"description\"\r\n                            id=\"description\"\r\n                            placeholder=\"Write Some Description on your tasks\"\r\n                            value={description}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </FormGroup>\r\n                    <Button className=\"ml-auto btn btn-sm\" type=\"Submit\">\r\n                        Create Task\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nCreateTodoForm.protoTypes = {\r\n    createTodo: propTypes.func.isRequired,\r\n};\r\nexport default CreateTodoForm;\r\n","/* eslint-disable react/forbid-prop-types */\r\nimport propTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Button, Input, ListGroup, ListGroupItem } from 'reactstrap';\r\n\r\nconst ListItem = ({ todo, toggleSelect, toggleCompleted }) => {\r\n    const { id, text, time, isSelect, isComplete } = todo;\r\n    return (\r\n        <ListGroupItem className=\"d-flex align-items-center justify-content-between\">\r\n            <Input type=\"checkbox\" id={id} checked={isSelect} onChange={() => toggleSelect(id)} />\r\n            <div className=\"mx-3\">\r\n                <h4>{text}</h4>\r\n                <p>{time.toDateString()}</p>\r\n            </div>\r\n\r\n            <Button\r\n                className=\"ml-auto btn btn-sm\"\r\n                color={isComplete ? 'danger' : 'success'}\r\n                onClick={() => toggleCompleted(id)}\r\n            >\r\n                {isComplete ? 'Completed' : 'Running'}\r\n            </Button>\r\n        </ListGroupItem>\r\n    );\r\n};\r\nListItem.propTypes = {\r\n    todo: propTypes.object.isRequired,\r\n    toggleSelect: propTypes.func.isRequired,\r\n    toggleCompleted: propTypes.func.isRequired,\r\n};\r\n\r\nconst ListView = ({ todos, toggleSelect, toggleCompleted }) => (\r\n    <ListGroup>\r\n        {todos.map((todo) => (\r\n            <ListItem\r\n                key={todo.id}\r\n                todo={todo}\r\n                toggleSelect={toggleSelect}\r\n                toggleCompleted={toggleCompleted}\r\n            />\r\n        ))}\r\n    </ListGroup>\r\n);\r\n\r\nListView.propTypes = {\r\n    todos: propTypes.array.isRequired,\r\n    toggleSelect: propTypes.func.isRequired,\r\n    toggleCompleted: propTypes.func.isRequired,\r\n};\r\nexport default ListView;\r\n","/* eslint-disable react/forbid-prop-types */\r\n\r\nimport propTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Button, Input, Table } from 'reactstrap';\r\n\r\nconst RowItem = ({ todo, toggleSelect, toggleCompleted }) => {\r\n    const { id, text, time, isSelect, isComplete } = todo;\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">\r\n                <Input\r\n                    type=\"checkbox\"\r\n                    id={id}\r\n                    checked={isSelect}\r\n                    onChange={() => toggleSelect(id)}\r\n                />\r\n            </th>\r\n            <th className=\"mx-3\">\r\n                <p>{time.toDateString()}</p>\r\n            </th>\r\n            <th>\r\n                <h4>{text}</h4>\r\n            </th>\r\n            <th>\r\n                <Button\r\n                    className=\"ml-auto btn btn-sm\"\r\n                    color={isComplete ? 'danger' : 'success'}\r\n                    onClick={() => toggleCompleted(id)}\r\n                >\r\n                    {isComplete ? 'Completed' : 'Running'}\r\n                </Button>\r\n            </th>\r\n        </tr>\r\n    );\r\n};\r\nRowItem.propTypes = {\r\n    todo: propTypes.object.isRequired,\r\n    toggleSelect: propTypes.func.isRequired,\r\n    toggleCompleted: propTypes.func.isRequired,\r\n};\r\n\r\nconst TableView = ({ todos, toggleSelect, toggleCompleted }) => (\r\n    <Table>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Time</th>\r\n                <th>Todo</th>\r\n                <th>Action</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {todos.map((todo) => (\r\n                <RowItem\r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    toggleSelect={toggleSelect}\r\n                    toggleCompleted={toggleCompleted}\r\n                />\r\n            ))}\r\n        </tbody>\r\n    </Table>\r\n);\r\n\r\nexport default TableView;\r\n","/* eslint-disable no-param-reassign */\r\nimport React from 'react';\r\nimport { Modal, ModalBody, ModalHeader } from 'reactstrap';\r\nimport shortid from 'shortid';\r\nimport Controller from '../Controller/Index';\r\nimport CreateTodoForm from '../create-todo-form';\r\nimport ListView from '../Listview/Index';\r\nimport TableView from '../Tableview';\r\n\r\nclass Todos extends React.Component {\r\n    state = {\r\n        todos: [\r\n            {\r\n                id: '10',\r\n                text: 'text',\r\n                time: new Date(),\r\n                isComplete: false,\r\n                isSelect: false,\r\n            },\r\n            {\r\n                id: '11',\r\n                text: 'text',\r\n                time: new Date(),\r\n                isComplete: false,\r\n                isSelect: false,\r\n            },\r\n        ],\r\n\r\n        isOpenTodoForm: false,\r\n        searchTerm: '',\r\n        view: 'list',\r\n        filter: 'all',\r\n    };\r\n\r\n    createTodo = (todo) => {\r\n        const { todos } = this.state;\r\n        todo.id = shortid.generate();\r\n        todo.time = new Date();\r\n        todo.isComplete = false;\r\n        todo.isSelect = false;\r\n        this.setState({\r\n            todos: [...todos, todo],\r\n        });\r\n    };\r\n\r\n    changeView = (event) => {\r\n        this.setState({\r\n            view: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleFilter = (filter) => {\r\n        this.setState({ filter });\r\n    };\r\n\r\n    handleSearch = (value) => {\r\n        this.setState({ searchTerm: value });\r\n    };\r\n\r\n    clearSelected = () => {\r\n        const { todos } = this.state;\r\n        this.setState({ todos: todos.filter((todo) => !todo.isSelect) });\r\n    };\r\n\r\n    clearCompleted = () => {\r\n        const { todos } = this.state;\r\n        this.setState({ todos: todos.filter((todo) => !todo.isComplete) });\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            filter: 'all',\r\n            searchTerm: '',\r\n            view: 'list',\r\n            isOpenTodoForm: false,\r\n        });\r\n    };\r\n\r\n    performSearch = () => {\r\n        const { todos, searchTerm } = this.state;\r\n        return todos.filter((todo) => todo.text.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    };\r\n\r\n    performFilter = (todos) => {\r\n        const { filter } = this.state;\r\n\r\n        if (filter === 'completed') {\r\n            return todos.filter((todo) => todo.isComplete);\r\n        }\r\n        if (filter === 'running') {\r\n            return todos.filter((todo) => !todo.isComplete);\r\n        }\r\n\r\n        return todos;\r\n    };\r\n\r\n    getView = () => {\r\n        let todos = this.performSearch();\r\n        todos = this.performFilter(todos);\r\n        const { view } = this.state;\r\n        return view === 'list' ? (\r\n            <ListView\r\n                todos={todos}\r\n                toggleSelect={this.toggleSelect}\r\n                toggleCompleted={this.toggleCompleted}\r\n            />\r\n        ) : (\r\n            <TableView\r\n                todos={todos}\r\n                toggleSelect={this.toggleSelect}\r\n                toggleCompleted={this.toggleCompleted}\r\n            />\r\n        );\r\n    };\r\n\r\n    toggleCompleted = (todoId) => {\r\n        const { todos } = this.state;\r\n        const todo = todos.find((todoid) => todoid.id === todoId);\r\n        todo.isComplete = !todo.isComplete;\r\n        this.setState({ todos: [...todos] });\r\n    };\r\n\r\n    toggleForm = () => {\r\n        const { isOpenTodoForm } = this.state;\r\n        this.setState({\r\n            isOpenTodoForm: !isOpenTodoForm,\r\n        });\r\n    };\r\n\r\n    toggleSelect = (todoId) => {\r\n        const { todos } = this.state;\r\n        const todo = todos.find((todoid) => todoid.id === todoId);\r\n        todo.isSelect = !todo.isSelect;\r\n        this.setState({ todos: [...todos] });\r\n    };\r\n\r\n    render() {\r\n        const { isOpenTodoForm, view, searchTerm } = this.state;\r\n        console.log(this.state);\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"display-5 mb-4 text-center\">Todo Application</h1>\r\n                <Controller\r\n                    view={view}\r\n                    term={searchTerm}\r\n                    handleSearch={this.handleSearch}\r\n                    toggleForm={this.toggleForm}\r\n                    handleFilter={this.handleFilter}\r\n                    changeView={this.changeView}\r\n                    clearSelected={this.clearSelected}\r\n                    clearCompleted={this.clearCompleted}\r\n                    reset={this.reset}\r\n                />\r\n\r\n                <div>{this.getView()}</div>\r\n                <Modal isOpen={isOpenTodoForm} toggle={this.toggleForm}>\r\n                    <ModalHeader toggle={this.toggleForm}>Create New Todo Item</ModalHeader>\r\n                    <ModalBody>\r\n                        <CreateTodoForm createTodo={this.createTodo} />\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Col, Container, Row } from 'reactstrap';\r\nimport Todos from './Components/todos/Index';\r\nimport './index.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <Container className=\"my-3\">\r\n            <Row>\r\n                <Col>\r\n                    <Todos />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\nexport default App;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}